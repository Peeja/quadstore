import { TSReadable, TSTermName } from '../types';
import { EventEmitter } from 'events';
import nanoid from './nanoid';
export declare const wait: (delay: number) => Promise<void>;
export declare const termNames: TSTermName[];
export declare const streamToArray: <T>(readStream: TSReadable<T>) => Promise<T[]>;
export declare const streamToString: <T>(readStream: TSReadable<T>) => Promise<string>;
export declare const isReadableStream: (obj: any) => boolean;
export declare const isPromise: (obj: any) => boolean;
export declare const isAbstractLevelDownClass: (obj: any) => boolean;
export declare const isAbstractLevelDOWNInstance: (obj: any) => boolean;
export declare const isDataFactory: (obj: any) => boolean;
export declare const resolveOnEvent: (emitter: EventEmitter, event: string, rejectOnError: boolean) => Promise<any>;
export declare const waitForEvent: (emitter: EventEmitter, event: string, rejectOnError: boolean) => Promise<any>;
export declare const wrapError: (err: Error, message: string) => Error;
export declare const defineReadOnlyProperty: (obj: object, key: string, value: any) => void;
export declare const noop: () => void;
export declare const hasAllTerms: (coll: any) => boolean;
export declare const genDefaultIndexes: () => string[][];
export { nanoid };
